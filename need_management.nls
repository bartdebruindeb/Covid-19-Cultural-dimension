__includes ["need_definition.nls"]
;might be to be updated later on, as need satisfaction depends on the consequences of your action rather than on your intent
;e.g. visiting a shop should not satisfy one's safety needs if this shop is empty

;LEGENDA
; Every subneed consist of a following variables:
; SWDE-[Need]: the expected weighted discounted satisfaction gain for a need after performing an action. This is equal to SDE-[Need] * importance-weight-[Need]
; SDE-[Need]: the expected discounted satisfaction gain for a need after performing an action. This is equal to the SUE-[Need]*urgency-[Need]
; SUE-[Need]: The expected undiscounted satisfaction gain for a need after performing an action. 
; urgency-[Need]: Is the urgency of satisfaction a need. Equal to (1 - [Need]-satisfaction-level)
; importance-weight-[Need]: Importance-weight
; SUA-[Need]: The actual undiscounted satisfaction gain for a need after performing an action.
; SDA-[Need]: The actual discounted satisfaction gain for a need after performing an action. This is equal to the SUA-[Need]/SUE-[Need] * urgency-[Need].


to update-needs-for-playing [current-activity-descriptor]
  decay-satisfaction-level

  set belonging-satisfaction-level clamp 0 1 (belonging-satisfaction-level + SDA-belonging current-activity-descriptor)
 
  set compliance-satisfaction-level clamp 0 1 (compliance-satisfaction-level + SDE-compliance current-activity-descriptor)

  set risk-avoidance-satisfaction-level  clamp 0 1 (risk-avoidance-satisfaction-level + SDE-risk-avoidance current-activity-descriptor)

  set leisure-satisfaction-level clamp 0 1 (leisure-satisfaction-level + SDE-leisure current-activity-descriptor)
  
  set autonomy-satisfaction-level clamp 0 1 (autonomy-satisfaction-level + SDE-autonomy current-activity-descriptor)
  
  set sleep-satisfaction-level clamp 0 1 (sleep-satisfaction-level + SDE-sleep current-activity-descriptor)
  
  if age != "young" [
  set luxury-satisfaction-level clamp 0 1 (luxury-satisfaction-level + SDA-luxury current-activity-descriptor)
  ]

end


;;this procedure is a simple representation of need decay
;important features:
;--need decay should decrease over time when not taken care of
;--special situations can lead to special decay (e.g. breaking an army-enforced lock in should hurt badly the satisfaction of safety needs)
;[the previous point might call for the introduction of the person's context later on]
to decay-satisfaction-level
  let belonging-decay 0.02
  if any? my-relatives and days-since-seen-relatives > 0 [set belonging-decay belonging-decay * 1.5]
  if any? my-colleagues and days-since-seen-colleagues > 0 [set belonging-decay belonging-decay * 1.5]
  if days-since-seen-friends > 0 [set belonging-decay belonging-decay * 1.5]

  set belonging-satisfaction-level belonging-satisfaction-level - belonging-decay
  if belonging-satisfaction-level < 0 [set belonging-satisfaction-level 0]

  set compliance-satisfaction-level compliance-satisfaction-level * 0.8
  if compliance-satisfaction-level < 0 [set compliance-satisfaction-level 0]

  set leisure-satisfaction-level leisure-satisfaction-level * 0.95
  if leisure-satisfaction-level < 0 [set leisure-satisfaction-level 0]
  
  set sleep-satisfaction-level sleep-satisfaction-level * 0.8 
  if sleep-satisfaction-level < 0 [set sleep-satisfaction-level 0]

  if age != "young" [
  set luxury-satisfaction-level luxury-satisfaction-level * 0.98
  if luxury-satisfaction-level < 0 [set luxury-satisfaction-level 0]
  ]
end

;Future work:
;update these numbers based on how many people are actually met when moving
;include networks and joint meetings
to-report SUE-belonging [ad]
  let gp location-of ad
  let motive motive-of ad


  let number [expected-number-of-other-participants] of gp
  let base 0
  let network-bonus 1
  let social-distancing-cut 1
  if social-distancing-of ad [
    set social-distancing-cut (1 - social-distance-profile)
  ]
  ;show (sentence "expected shift satisfaction community:"
  ;   [gathering-type] of first activity-descriptor last activity-descriptor number)
  ifelse number = 0
  [set base 0]
  [ifelse number < 5
    [set base 0.05]
    [ifelse number < 20
      [set base 0.1]
      [set base 0.25]
    ]
  ]
  
  
  if is-family-present-in-current-gathering-point? and days-since-seen-relatives > 0 [
    set network-bonus network-bonus + min (list 0.5 (days-since-seen-relatives / 28))
  ]

  if is-worker?
  [
    ;;workers expect to meet their colleagues at the workplace
    let colleagues-present location-of ad = my-work
    ;let colleagues-present any? my-colleagues with [current-activity = [current-activity] of myself]
    if colleagues-present and days-since-seen-colleagues > 0 [
      set network-bonus network-bonus + min (list 0.5 (days-since-seen-colleagues / 28))
    ]
  ]

  ;;people expect to meet their friends at the leisure spaces
  ;;or kids at schools
  ;;or students at the uni
  ;;this counts as a psychological heuristic that saves from having to cross sets of agents (which is bad for computational complexity reasons)
  ;;
  ;;moreover it was checking whether the other type of agent is at the current point
  ;;which was a bit weird as agents keep moving and in theory don't really know what is the gathering point of others (and whether they plan to go there or are currently there)
  ;;another solution might be to create a form of a likelihood factor: agents increase/decrease this factor when they meet/do not meet a friend
  let friends-present [is-leisure-point?] of location-of ad or 
  ([is-school?] of location-of ad and is-young?) or
  ([is-university?] of location-of ad and is-student?)
  ;any? my-friends with [current-activity = [current-activity] of myself]
  if friends-present and days-since-seen-friends > 0 [
    set network-bonus network-bonus + min (list 0.5 (days-since-seen-friends / 28))
  ]

  report base * network-bonus * social-distancing-cut
end

to-report SUA-belonging [ad]
  let gp location-of ad
  let motive motive-of ad

  let number count people with [current-activity = gp]
  let base 0
  let network-bonus 1
  let social-distancing-cut 1
  if social-distancing-of ad [
    set social-distancing-cut (1 - social-distance-profile)
  ]
  ;show (sentence "expected shift satisfaction community:"
  ;   [gathering-type] of first activity-descriptor last activity-descriptor number)
  ifelse number = 0
  [set base 0]
  [ifelse number < 5
    [set base 0.05]
    [ifelse number < 20
      [set base 0.1]
      [set base 0.25]
    ]
  ]
  let family-present any? (([gatherers] of gp) with [member? self [my-relatives] of myself])
  if family-present and days-since-seen-relatives > 0 [
    set network-bonus network-bonus + min (list 0.5 (days-since-seen-relatives / 28))
  ]
  let colleagues-present any? (([gatherers] of gp) with [member? self [my-colleagues] of myself])
  if colleagues-present and days-since-seen-colleagues > 0 [
    set network-bonus network-bonus + min (list 0.5 (days-since-seen-colleagues / 28))
  ]
  let friends-present any? (([gatherers] of gp) with [member? self [my-friends] of myself])
  if friends-present and days-since-seen-friends > 0 [
    set network-bonus network-bonus + min (list 0.5 (days-since-seen-friends / 28))
  ]
  report base * network-bonus * social-distancing-cut
end

to-report SUE-risk-avoidance [ad]
  let gp location-of ad
  let motive motive-of ad
  let result 0.1

  ifelse is-believing-to-be-infected? or has-internally-visible-symptoms? [
    if any-free-bed-in-hospital? and is-get-healed-to-hospital-descriptor? ad [
      set result 0.3
    ]
    if is-currently-being-treated-at-hospital? and is-get-healed-to-hospital-descriptor? ad [
      set result 0.4
    ]
    set result -0.1
  ] [
    if gp != my-home [
      let number [expected-number-of-other-participants] of gp
      if number = 0 [set result 0.2 ]
      if number < 5 [set result 0.1 ]
      if number < 10 [set result -0.1 ]
      if number < 20 [set result -0.2]
      set result -0.3
    ]
  ]


  ifelse social-distancing-of ad
    [ set result result + 0.1 ]
    [ set result result - 0.1 ]

  report result
end

to-report SUE-compliance [ad]
  let gp location-of ad
  let motive motive-of ad

  let bonus-compliance-to-obligation 0
  if gp = my-home and is-lockdown-enforced?
  [
  ;  show "lockdown bonus"
    set bonus-compliance-to-obligation  bonus-compliance-to-obligation + 0.2
  ]

  if is-social-distancing-measure-active? [
    ifelse social-distancing-of ad
    [ set bonus-compliance-to-obligation bonus-compliance-to-obligation + 0.1 ]
    [ set bonus-compliance-to-obligation bonus-compliance-to-obligation - 0.1 ]
  ]

  if (motive = work-motive) and is-I-have-contractual-obligations?
  [
;    show "do your work bonus"
    if not is-lockdown-enforced? and gp != my-home [
      set bonus-compliance-to-obligation bonus-compliance-to-obligation + 0.2
      if gp = current-activity [
        set bonus-compliance-to-obligation  bonus-compliance-to-obligation + 0.1
      ]
    ]
    set bonus-compliance-to-obligation  bonus-compliance-to-obligation + 0.1
  ]
  if is-I-have-contractual-obligations? and motive != work-motive [
    set bonus-compliance-to-obligation bonus-compliance-to-obligation - 0.2
  ]

  ; Make kids go to school
  ifelse (motive = "mandatory") and not is-lockdown-enforced? [
    set bonus-compliance-to-obligation bonus-compliance-to-obligation + 0.1
  ] [
    if age = "youth" [
      set bonus-compliance-to-obligation bonus-compliance-to-obligation - 0.1
    ]
  ]

  ; Make students go to university
  if (motive = "learning") and not is-lockdown-enforced? [
    set bonus-compliance-to-obligation bonus-compliance-to-obligation + 0.1
  ]

  if is-lockdown-enforced? and gp != my-home [
    set bonus-compliance-to-obligation bonus-compliance-to-obligation - 0.2
  ]

  if not is-lockdown-enforced? and member? motive ["relaxing" "shopping"] [
    set bonus-compliance-to-obligation bonus-compliance-to-obligation + 0.1
  ]

  if not is-lockdown-enforced? and age = "retired" and slice-of-the-day = "morning" and [gathering-type] of gp = "relaxing" [
    ; Make retired agents do something relaxing every morning
    set bonus-compliance-to-obligation bonus-compliance-to-obligation + 0.1
  ]

  ; A passive bonus for compliance in case there is no lockdown
  if not is-lockdown-enforced? [
    set bonus-compliance-to-obligation bonus-compliance-to-obligation + 0.1
  ]

  if is-currently-being-treated-at-hospital? and [is-hospital?] of gp [
    set bonus-compliance-to-obligation bonus-compliance-to-obligation + 0.3
  ]

  report bonus-compliance-to-obligation
end

; The agents expect to get food for seven days at a time
to-report SUE-food-safety [ad]
  let motive motive-of ad
  if motive = "essential shopping" [
    let available-food-days [available-food-rations] of min-one-of (gathering-link-neighbors with [gathering-type = "home"]) [available-food-rations]
    if available-food-days >= 14 [
      report 0
    ]
    report max (list 0.5 (1 - (14 - available-food-days) / 14))
  ]
  report 0
end

to-report SUE-leisure [ad]
  let gp location-of ad
  let motive motive-of ad


  if motive = "relaxing" [
    report 0.2
  ]
  report 0
end

to-report SUE-sleep [ad]
 let gp location-of ad
  let motive motive-of ad 
  
    if motive = "rest" [
    if slice-of-the-day = "night" [
      report ifelse-value has-internally-visible-symptoms? [ 0.6 ] [ 0.8 ]
    ]
    report ifelse-value has-internally-visible-symptoms? [ 0.15 ] [ 0.2 ]
  ]
  if is-currently-being-treated-at-hospital? and is-get-healed-to-hospital-descriptor? ad [
    if slice-of-the-day = "night" [
      report 0.7
    ]
    report 0.15
  ]
  report 0
  
end


to-report SUE-luxury [ad]
  if age != "young" [
    let gp location-of ad
    let motive motive-of ad
    
    if motive = "shopping" [
      report 0.4
    ]
    report 0
  ]
  report 0
end

to-report SUA-luxury [ad]
  let result min (list (amount-of-last-luxury-items-bought / 7) 1) * 0.4
  set amount-of-last-luxury-items-bought 0
  report result
end

to-report SUE-autonomy [ad]
  let gp location-of ad
  let motive motive-of ad

  if working-day? and (slice-of-the-day = "morning" or slice-of-the-day = "afternoon") [
    if age = "young" [
      ifelse [gathering-type] of gp = "school"
      [ report  0.2 ]
      [ report -0.1 ]
    ]
    if age = "student" [
      ifelse [gathering-type] of gp = "university"
      [ report  0.2 ]
      [ report -0.1 ]
    ]
    if age = "worker" [
      ifelse motive = work-motive [
        ifelse gp != my-home
        [ report 0.2 ]
        [ report 0.05 ]
      ]
      [ report -0.1 ]
    ]
  ]
  if slice-of-the-day = "night" and [gathering-type] of gp = "home" and motive = "rest"
  [report 0.2]
  if is-lockdown-enforced? and [gathering-type] of gp != "home"
  [report 0.1]
  report 0
end

to-report SUE-financial-survival [ad]
  if age != "young" [
    let gp location-of ad
    let motive motive-of ad
    let eating-costs price-of-rations-in-essential-shops * amount-of-rations-I-buy-when-going-to-essential-shops
    
    if is-I-have-contractual-obligations? [
      if gp = my-work [
        report min (list (my-expected-income / eating-costs) 1)
      ]
      report max (list ((- my-expected-income) / eating-costs) 0)
    ]
    if motive = "essential shopping" [
      report (- min (list ((my-amount-of-capital - eating-costs) / eating-costs) 1))
    ]
    if motive = "shopping" [
      report (- min (list ((my-amount-of-capital - amount-of-rations-I-buy-when-going-to-shops * price-of-rations-in-non-essential-shops) / eating-costs) 1))
    ]
    report 0
  ]
  report 0
end

to-report SUE-financial-safety [ad]
  if age != "young" [
  let gp location-of ad
  let motive motive-of ad
  let eating-costs price-of-rations-in-essential-shops * amount-of-rations-I-buy-when-going-to-essential-shops

  if is-I-have-contractual-obligations? and gp = my-work [
    if my-previous-amount-of-capital > 0
    [report clamp 0 1 my-expected-income / my-previous-amount-of-capital]
    report 1
  ]
  if my-previous-amount-of-capital <= 0 [
    report -1
  ]
  if motive = "essential shopping" [
    report (- (eating-costs / my-previous-amount-of-capital))
  ]
  if motive = "shopping" [
    report (- (amount-of-rations-I-buy-when-going-to-shops * price-of-rations-in-non-essential-shops / my-previous-amount-of-capital))
  ]
    report 0
  ]
  report 0
end


to-report SUE-health [ad]
  ifelse is-believing-to-be-infected? or has-internally-visible-symptoms?
  [
    if is-observing-critical-symptoms? [
      if is-get-healed-to-hospital-descriptor? ad and (is-currently-allocated-a-bed-in-hospital? or any-free-bed-in-hospital?)
      [report .8]
      report 0
    ]
    
    if is-get-healed-to-hospital-descriptor? ad and (is-currently-allocated-a-bed-in-hospital? or any-free-bed-in-hospital?)
    [
      report .3
    ]
    if is-rest-at-home-descriptor? ad
    [ report 0.2 ]
    report 0
  ]
  ;;can be updated if agents start to be deprived from sleep, not needed at the moment
  [report 1]
 
end

to-report global-prevalence-of [ad]
  reset-timer
  let total-satisfaction 0
  ifelse culture? 
  [set total-satisfaction sum (list
    (SDE-food-safety ad * importance-weight-food-safety) 
    (SDE-financial-survival ad * importance-weight-financial-survival) 
    (SDE-risk-avoidance ad * importance-weight-health) 
    (SDE-sleep ad * importance-weight-sleep) 
    (SDE-compliance ad * importance-weight-compliance) 
    (SDE-risk-avoidance ad * importance-weight-risk-avoidance) 
    (SDE-financial-safety ad * importance-weight-financial-safety) 
    (SDE-belonging ad * importance-weight-belonging)
    (SDE-autonomy ad * importance-weight-autonomy) 
    (SDE-luxury ad * importance-weight-luxury) 
    (SDE-leisure ad * importance-weight-leisure) 
    (SDE-sleep ad * importance-weight-sleep) 
    (SDE-sleep ad * importance-weight-sleep)) 
  ]
    
  [ 
    ;; SDE-survival, SDE-safety, SDE-belonging, SDE-self-esteem are only used in the non-culture needs model and are located in need_defintion.nls
    set total-satisfaction sum (list
    (importance-weight-survival * SDE-survival ad) 
    (importance-weight-safety * SDE-safety ad)
    (importance-weight-belonging * SDE-belonging ad)
    (importance-weight-self-esteem * SDE-self-esteem ad))
  ]
  
 debug-file-print (sentence "Global prevalence of:" [gathering-type] of location-of ad " " motive-of ad " " total-satisfaction)
  report total-satisfaction
  
  ;should be expanded with new needs as they are added

end

;;; SDE and SDA SURVIVAL NEEDS

to-report SDE-health [ad]
  let expected-increase SUE-health ad
  let discounted-increase expected-increase * (1 - health-satisfaction-level)
  report discounted-increase
end

to-report SDE-food-safety [ad]
  let expected-increase SUE-food-safety ad
  let discounted-increase expected-increase * (1 - food-safety-satisfaction-level)
  report discounted-increase
end

to-report SDE-financial-survival [ad]
  let expected-increase SUE-financial-survival ad
  let discounted-increase expected-increase * (1 - financial-survival-satisfaction-level)
  report discounted-increase
end

to-report SDE-sleep [ad]
  let expected-increase SUE-sleep ad
  let discounted-increase expected-increase * (1 - sleep-satisfaction-level)
  report discounted-increase
end

;;; SDE and SDA SAFETY NEEDS

to-report SDE-financial-safety [ad]
  let expected-increase SUE-financial-safety ad
  let discounted-increase expected-increase * (1 - financial-safety-satisfaction-level)
  report discounted-increase
end

to-report SDE-compliance [ad]
  let expected-increase SUE-compliance ad
  let discounted-increase expected-increase * (1 - compliance-satisfaction-level)
  report discounted-increase
end

to-report SDE-risk-avoidance [ad]
  let expected-increase SUE-risk-avoidance ad
  let discounted-increase expected-increase * (1 - risk-avoidance-satisfaction-level)
  report discounted-increase
end

;;; SDE and SDA BELONGING NEEDS

to-report SDE-belonging [ad]
  let expected-increase SUE-belonging ad
  let discounted-increase expected-increase * (1 - belonging-satisfaction-level)
  report discounted-increase
end

to-report  SDA-belonging [ad]
  let expected-increase SUA-belonging ad
  let discounted-increase expected-increase * (1 - belonging-satisfaction-level)
  report discounted-increase
end

;;; SDE and SDA SELF-ESTEEM NEEDS

to-report SDE-leisure [ad]
  let expected-increase SUE-leisure ad
  let discounted-increase expected-increase * (1 - leisure-satisfaction-level)
  report discounted-increase
end

to-report SDE-luxury [ad]
  let expected-increase SUE-luxury ad
  let discounted-increase expected-increase * (1 - luxury-satisfaction-level)
  report discounted-increase
end

to-report SDA-luxury [ad]
  let actual-increase SUA-luxury ad
  let discounted-increase actual-increase * (1 - luxury-satisfaction-level)
  report discounted-increase
end

to-report SDE-autonomy [ad]
  let expected-increase SUE-autonomy ad
  let discounted-increase expected-increase
  if expected-increase > 0 [ set discounted-increase expected-increase * (1 - autonomy-satisfaction-level) ]
  report discounted-increase
end


