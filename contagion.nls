globals [
  #people-infected-in-pubtrans
  #people-infected-in-shared-cars
  #people-infected-when-queuing
  #people-infected-in-activities
  #people-infected-in-general-travel
]
to spread-contagion
  spread-by-travelling
  spread-by-activity-proximity
end

to spread-by-travelling
  let travellers people with [is-moving-outside-for-reaching-current-activity?]
  let #contagious count travellers with [is-contagious?]
  ask people [if is-away? [apply-risk-of-contamination-when-away]]
  
  ask travellers [
  apply-risk-of-contamination-when-travelling count travellers #contagious
  ]
  
  foreach list-of-buses [
    x -> spread-within-a-set-of-turtles x density-in-public-transport [ [] -> set #people-infected-in-pubtrans #people-infected-in-pubtrans + 1]
  ]
  
  foreach list-of-shared-cars [
    x -> spread-within-a-set-of-turtles x density-in-shared-cars [ [] -> set #people-infected-in-shared-cars #people-infected-in-shared-cars + 1]
  ]
  
  let people-waiting-for-bus people with [stayed-out-queuing-for-bus?]
  spread-within-a-set-of-turtles people-waiting-for-bus density-when-queuing 
  * (sqrt count people-waiting-for-bus / count people);;this last factor represents the relative density of people waiting for buses
                                                    ;; which further reduces the risk of getting sick when queuing
  [ [] -> set #people-infected-when-queuing #people-infected-when-queuing + 1]
end

to spread-by-activity-proximity
  ask gathering-points with [not (self = away-gathering-point)]
  [
    spread-within-a-set-of-turtles current-gatherers proximity-factor [ [] -> set #people-infected-in-activities #people-infected-in-activities + 1]
  ]
end

to spread-within-a-set-of-turtles [ts prox-factor lambda-when-contagion]
  let number-contagious count ts with [is-contagious?]
  ;;could be replaced by better maths it time becomes short
  repeat number-contagious [
    ask ts [apply-risk-of-contamination prox-factor * contextual-contagion-modificators lambda-when-contagion]
  ]
end


to-report contextual-contagion-modificators
  report age-infection-risk-mitigation-factor * social-distancing-risk-mitigation-factor
end

to-report social-distancing-risk-mitigation-factor
  ifelse is-I-apply-social-distancing? [report probably-contagion-mitigation-from-social-distancing]
  [report 1]
end


to apply-risk-of-contamination-when-travelling [#travellers #contagious]
  if density-travelling-propagation = 0 [stop]
  if not is-moving-outside-for-reaching-current-activity? [stop]  
   
  let ratio-contagious #contagious / count people
  
  ;;these are "intuitive maths", to be confirmed if relevant
  ;;the squared root represents the risk of two people picking the same item when each pick n items on a n*n space (x*x -> n * 1)
  ;;it could be cubic if the people we would consider a 3D space (or time)
  let number-encounters sqrt #travellers
  
  let probability-avoiding-all-contagious (1 - ratio-contagious) ^ number-encounters
  let probability-getting-sick 1 - probability-avoiding-all-contagious
  
 ; show (sentence count travellers with [is-contagious?] "/" ratio-contagious "#contacts" number-encounters "avoid all:" probability-avoiding-all-contagious "sick?" probability-getting-sick)
  
  ;;could be fastened with a bit of math, like 1-(1-p)^k
  let was-sick? is-infected?
  apply-risk-of-contamination probability-getting-sick * density-travelling-propagation * contextual-contagion-modificators [ [] -> set #people-infected-in-general-travel #people-infected-in-general-travel + 1]
  if not was-sick? and is-infected? [set #who-became-sick-while-travelling-locally #who-became-sick-while-travelling-locally + 1]
end

to-report age-infection-risk-mitigation-factor
  report ifelse-value is-young? [factor-reduction-probability-transmission-young] [1]
end

to apply-risk-of-contamination-when-away
  if random-float 1 < probability-infection-when-abroad * contextual-contagion-modificators and infection-status = healthy-infection-status
  [
    set-contaminated
  ]
end

to set-contaminated
  set infection-status "asymptomatic noncontagious" 
  set duration-current-disease-status infection-to-asymptomatic-contagiousness
end

to apply-risk-of-contamination [factor lambda-when-contagion]
  if  random-float 1 < factor * propagation-risk and infection-status = healthy-infection-status
  [
    set-contaminated
    run lambda-when-contagion
  ]
end

to-report is-contagious?
  report not (infection-status = healthy-infection-status) and not (infection-status = "immune")
end

to-report is-alive?
  report not (infection-status = "dead")
end

to infect-one-random-person
    ask n-of (min list 3 count people) people [
    set-infection-status infected-asymptomatic-status
    set duration-current-disease-status infection-to-asymptomatic-contagiousness
  ]
end


